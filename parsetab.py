
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '}\xf5\x8d \xeaK\x12o\xc8-\x8f\xd3\x13\xf3\xb3\xdb'
    
_lr_action_items = {'STRING':([1,8,],[7,7,]),'VARNAME':([0,1,8,],[2,4,4,]),'EQUALS':([2,],[8,]),'NUMBER':([1,8,],[6,6,]),'PRINT':([0,],[1,]),'$end':([0,3,4,5,6,7,9,],[-2,0,-4,-1,-5,-6,-3,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([1,8,],[5,9,]),'statement':([0,],[3,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parser.py',67),
  ('statement -> <empty>','statement',0,'p_statement_blank_line','parser.py',72),
  ('statement -> VARNAME EQUALS expression','statement',3,'p_statement_assign','parser.py',76),
  ('expression -> VARNAME','expression',1,'p_expression_varname','parser.py',80),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',107),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',111),
]
